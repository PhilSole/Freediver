const FD = {};
FD.preload = function() {
    console.log('preload');

    this.load.setBaseURL('./assets/');
    this.load.image('water', 'backgrounds/underwater.jpg');
}
FD.create = function() {
    console.log('create');

    //===========================
    // World
    //===========================
    let worldWidth = 640;
    let worldHeight = 360;

    this.cameras.main.setBounds(-2.5 * worldWidth, 0, 5 * worldWidth, 5 * worldHeight);
    this.matter.world.setBounds(-2.5 * worldWidth, 0, 5 * worldWidth, 5 * worldHeight, 64, true, true, false, true); 
    
    
    //===========================
    // Background
    //===========================
    let background = this.add.image(-2.5 * worldWidth, 0, 'water').setOrigin(0);

    background.displayWidth = 5 * worldWidth;
    background.displayHeight = 5 * worldHeight;


    //===========================
    // Terrain            
    //===========================


    //===========================
    // Player
    //===========================


    //===========================
    // Other characters
    //===========================


    //===========================
    // Physics experiments
    //===========================
    let circle = this.add.circle(60, 420, 15);

    FD.circle1 = this.matter.add.gameObject(circle, {
        shape: 'circle',
        frictionAir: 0.0027,
        density: 0.1161
    });

    //===========================
    // Camera
    //===========================    
    this.cameras.main.setDeadzone(100, 100);
    this.cameras.main.startFollow(FD.circle1, true);
    this.cameras.main.setZoom(1);

    //===========================
    // Data
    //===========================
    FD.data = this.add.text(15, 15)
            .setText(['Depth: ', 'Pressure: ', 'Lung volume: ', 'Oxygen: '])
            .setScrollFactor(0);
            FD.data.setShadow(1, 1, '#000000', 2);

    
    //===========================
    // Controls
    //===========================
    this.matter.add.mouseSpring();

    this.input.on('pointerdown', function (pointer) {
        console.log('click');
    }, this);    
         
}

let buoyancyConstant = 75.5 * 1.025 * .00015;
console.log(buoyancyConstant);

FD.oxygen = 100;
FD.timeStart = 0;
FD.timeElapsed = 0

FD.update = function(time, delta) {
    // Calculate buoyancy force
    let depth = FD.circle1.body.position.y/15;
    let pressure = depth * 1025 * 9.8 + 100000;
    let pressureRatio = 100000/pressure;
    let airVolume = 10 * pressureRatio;
    let buoyancyVariable = airVolume * 1.025 * 0.00015;
    let buoyancyTotal = buoyancyConstant + buoyancyVariable;

    FD.circle1.applyForce({x:0, y: -buoyancyTotal});

    // Calculate remaining oxygen
    if(FD.timeStart == 0) {
        FD.timeStart = time;
        console.log('start');
    } else {
        FD.timeElapsed += delta;
        FD.oxygen -= FD.timeElapsed/12000000;
    }


    FD.data.setText([
        'Depth: ' + parseInt(FD.circle1.body.position.y / 15) + 'm',
        'Pressure: ' + (pressure/100000).toFixed(1) + 'BAR',
        'Lung volume: ' + airVolume.toFixed(1) + 'L',
        'Oxygen: ' + Math.round(FD.oxygen) + '%',
    ])
} 

// ======================================
// Calculate required gravity value
// ======================================

// var bla = 0;

// if(bla < 1) {
//     console.log('first update: ' + a);
//     console.log(FD.circle1);
//     // FD.game.destroy();
//     bla = 1;
// }

// if(FD.circle1.position.y >= 345) {
//     console.log('last update:' + a);
//     console.log(FD.circle1);
//     FD.game.destroy();
// }
FD.metre = 15;

FD.config = {
    type: Phaser.AUTO, // Either WebGL or canvas
    width: 640,
    height: 360,
    backgroundColor: '#c4dedf',
    parent: 'gameContainer',
    pixelArt: true, // pixel graphics won't blur when scaling. https://www.html5gamedevs.com/topic/36607-scaling-the-canvas-for-pixel-art/
    physics: {
        default: 'matter',
        matter: {
            debug: { // See debug options.js example
                showAngleIndicator: true,
                showCollisions: true,
                showSleeping: true,
                showJoint: true,
            },
            enableSleeping: false, // Performance gain - Bodies that come to rest can sleep and wake. https://github.com/liabru/matter-js/issues/354
            gravity: { 
                y: .15 
            },
            plugins: {
                attractors: true
            }
        }
    },
    scale: {
        // parent: 'yourgamediv',
        // mode: Phaser.Scale.FIT,
        autoCenter: Phaser.Scale.CENTER_BOTH,
        // width: 800,
        // height: 600
    },
    scene: {
        preload: FD.preload,
        create: FD.create,
        update: FD.update
    }
};
function ready(callbackFunc) {
    if (document.readyState !== 'loading') {
        callbackFunc();
    } else {
        document.addEventListener('DOMContentLoaded', callbackFunc);
    }
}

ready(function () {
    console.log('under wayish');

    FD.game = new Phaser.Game(FD.config);

    // FD.game.events.on('step', function(time, delta){
    //     console.log('step: ' + time);
    // });    

    // FD.game.events.on('poststep', function(time, delta){
    //     console.log('poststep: ' + time);
    // });

    // FD.game.events.on('preupdate', function(time, delta){
    //     console.log('preupdate: ' + time);
    // });
    
    // FD.game.events.on('prerender', function(renderer, time, delta){
    //     console.log('prerender: ' + time);
    // });    
});